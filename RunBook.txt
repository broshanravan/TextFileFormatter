Upon starting the application, the user will be presented with the following options.

1- To quit the app type 'stop' and  press 'Enter' button.
2- To start running the app press the user needs 'Enter' and they will be prompted by a message to insert the file full name and press 'Enter' to start the formatting process

The file path would be fixed to the folder 'input' at the root of the project. 
The user only needs to enter the file name with its type extension (for example 'input1.txt') 
The relative path within the project and in the folder ‘input’.

In case the file exists, the system will then start the formatting process by asking for the type of change to be made to the file contents.
Otherwise, the user will get an error prompt to inform them that the file name is not valid.

Please note that the application looks for input files only inside the 'input' and  write the resulted file into the ' output' directory at the root of the project.
After the file is located the system asks for the type of format that needs to be applied to the text inside the file.
One of the following flags needs to be entered for the application to perform the right functionality.

'SEV' Converts all the '7' characters to 'e'.
'REV' Reverses all strings.
'TRM' Removes all white spaces.
'ASC' If the ASCII code of the character is between 32 and 63 inclusive, convert the character to its ASCII value plus one.

Just type one of the above flags specified in the console and press 'Enter'.

To complete the task and produce that final result file run the command 'COMP'

The application will then create the final output file inside the folder ‘output’
This application can be run from any IDE. just import it as a Maven project

There is also an executable 'Jar'(TetFileFormatter.jar) file’ and a '.bat' (formater.bar) file to run the application independently.
Just copy the .bat and executable jar file to a folder of your choice.
Note: You also need to copy the ‘input’ folder with its resource files and the ‘output’ folder it into the same directory where the.jar and the .bat files are in, as the application will be looking for these subfolders in the same directory as it resides.
The final file name will be assembled according to the types and number of formats that were applied to the contents of the original input file.

The same principle applies when rnning the application from an IDE, as the two folders have not been committed to git

At the end of each process of producing a new file, the application will again provide the user with the same option to continue by pressing 'Enter Button or termination the application bt typing the word 'stop' and pressing 'Enter' button.

Please note that in order to run the project in IDE the two folders 'input' and 'output' need to be added to roor as they have not been pushing to Git'
