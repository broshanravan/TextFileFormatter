Upon starting the application, the user will be presented with the following options.

1- To quit the application type 'stop' and  press the 'Enter' button.
2- To start running the application press the 'Enter' button and you will be prompted by a message to insert the file name. 
Insert the file name and press 'Enter' button to start the formatting process

Note: The file path would be fixed to the folder 'input' at the root of the project. Hence the user only needs to enter the file name with its type extension (for example 'input1.txt'). 


In case the file exists, the application will then start the formatting process by asking for the type of change to be made to the file contents.

'SEV' Converts all the '7' characters to 'e'.
'REV' Reverses all strings.
'TRM' Removes all white spaces.
'ASC' If the ASCII code of the character is between 32 and 63 inclusive, convert the character to its ASCII value plus one.

Otherwise, the user will get an error prompt to inform them that the file name is not valid.

Please note that the application looks for input files only inside the 'input' and  write the resulted file into the ' output' directory at the root of the project.

After the file is located the system asks for the type of format that needs to be applied to the text inside the file.
One of the above flags needs to be entered for the application to start performing the right functionality.

Just type one of the above flags( SEV, REV, TRM, ASC) specified in the console and press 'Enter'.

To complete the task and produce that final result file insert the command 'COMP' and press Enter

The application will then create the final output file inside the folder 'output'
This application can be run from any IDE. just import it as a Maven project

There is also an executable 'Jar'(TetFileFormatter.jar) file and a '.bat' (formater.bat) file in the root of this project to enable the user to run the application independently.
Just copy the .bat and executable jar file to a folder of your choice.

Note: You also need to copy the ‘input’ folder with its contents and the 'Output' folder into the same directory where the .jar and the .bat files reside, as the application will look for these subfolders in its own directory.
The final file name will be assembled according to the types and number of formats that were applied to the contents of the original input file.

The same principle applies when running the application from an IDE, as the two folders have not been committed to git

At the end of each process upon producing a new file, the application will then provide the user with the same option as the start of the application to:
  1- Continue by pressing the 'Enter' Button 
   
  2-Terminate the application by inserting the word 'stop' and then pressing the 'Enter' button.

Please note that to run the project in an IDE the two folders 'input' and 'output' need to be added to root as they have not been pushed to the 'Git' repository
